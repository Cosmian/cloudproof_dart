---
name: Flutter CI
on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-12
          - os: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter
          restore-keys: ${{ runner.os }}-flutter

      - name: Install llvm
        if: contains(runner.os, 'Linux')
        run: sudo apt install libclang-dev llvm

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.3.4
          channel: stable

      - uses: actions/setup-python@v3
        with:
          python-version: 3.7

      - run: flutter pub get
      - run: python scripts/get_native_libraries.py

      - name: uname
        run: uname -a

      - name: Check build Android
        if: contains(runner.os, 'Linux')
        run: |
          cd example
          flutter build apk
          cd ..

      # - name: Run integration tests
      #   if: contains(runner.os, 'Linux')
      #   # more info on https://github.com/ReactiveCircus/android-emulator-runner
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 29
      #     arch: x86_64
      #     profile: Nexus 6
      #     script: flutter test integration_test --verbose

      - name: List all simulators
        if: contains(runner.os, 'macOS')
        run: xcrun xctrace list devices

      - name: Start Simulator
        if: contains(runner.os, 'macOS')
        # the command "xcrun simctl boot" expects a device identifier
        # the assignment of the UUID variable consists of retrieving the ID of the simulator
        # by extracting it from the command "xcrun xctrace list devices"
        run: |
          UUID=$(xcrun xctrace list devices | grep -m 1 "^iPhone 14 Pro Simulator (16.2)" | awk '{gsub(/[()]/,""); print $NF}')
          echo $UUID
          xcrun simctl boot "${UUID:?No Simulator with this name found}"

      - name: Display exported functions in universal lib
        if: contains(runner.os, 'macOS')
        run: |
          nm -g ios/libcloudproof.a || true

      - name: Run integration tests on iOS
        if: contains(runner.os, 'macOS')
        run: |
          cd example
          flutter test integration_test/
          cd ..

      - run: flutter analyze .
      - run: flutter test --concurrency 1 -x redis # exclude redis tests (no docker for macos)
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379

      - name: Upload non-regression test vectors
        if: contains(runner.os, 'Linux')
        uses: actions/upload-artifact@v3
        with:
          name: cloudproof_flutter
          path: |
            ./build/non_regression_vector.json
            ./build/sqlite.db
          retention-days: 1
          if-no-files-found: error

      - run: dart benchmark/cloudproof_benchmark.dart

      - name: Dart publish dry run
        if: contains(runner.os, 'Linux')
        run: |
          mkdir -p ~/.config/dart
          echo "$DART_CREDENTIALS" > ~/.config/dart/pub-credentials.json
          rm -f android/src/main/jniLibs/*/.git*
          # rm -f ios/.gitignore # du to the large size of universal lib for ios, .a must be recovered from package.cosmian.com
          rm -f resources/.gitignore
          rm -f lib/src/.gitignore
          git add * || true
          dart pub publish --dry-run
        env:
          DART_CREDENTIALS: ${{ secrets.DART_CREDENTIALS }}

      - name: Dart publish
        if: contains(runner.os, 'Linux') && startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p ~/.config/dart
          echo "$DART_CREDENTIALS" > ~/.config/dart/pub-credentials.json
          rm -f android/src/main/jniLibs/*/.git*
          # du to the large size of universal lib for ios, .a must be recovered from package.cosmian.com
          rm -f ios/*.a
          rm -f ios/*.gitignore
          rm -f resources/.gitignore
          rm -f lib/src/.gitignore
          git add * || true
          dart pub publish -f
        env:
          DART_CREDENTIALS: ${{ secrets.DART_CREDENTIALS }}

      - name: Verify package import from internet
        continue-on-error: true
        if: contains(runner.os, 'Linux') && startsWith(github.ref, 'refs/tags/')
        run: |
          cp -r example /tmp/flutter_example
          cd /tmp/flutter_example
          sed -i "s/cloudproof:/cloudproof: ${REF_NAME:1}/" pubspec.yaml
          sed -i "s/path: ..//" pubspec.yaml
          flutter pub get
          flutter build apk
        env:
          REF_NAME: ${{ github.ref_name }}

      - name: Upload dependencies and source
        if: contains(runner.os, 'Linux') && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: cloudproof_flutter_${{ github.ref_name }}
          path: |
            .
            !build
            !.mypy_cache
            !example
            !.git
            !.dart_tool
            !.packages
          retention-days: 1
          if-no-files-found: error

  cloudproof_flutter_with_services:
    if: startsWith(github.ref, 'refs/tags/') != true
    uses: Cosmian/reusable_workflows/.github/workflows/cloudproof_flutter.yml@develop
    with:
      branch: ${{ github.head_ref }}
      target: x86_64-unknown-linux-gnu
      extension: so
      copy_fresh_build: false

  cloudproof_java:
    needs: build
    uses: Cosmian/reusable_workflows/.github/workflows/cloudproof_java_in_docker.yml@develop
    with:
      branch: develop
      target: x86_64-unknown-linux-gnu
      extension: so
      destination: linux-x86-64
      os: ubuntu-20.04
      kms-version: 4.10.0
      findex-cloud-version: 0.3.1
      copy_fresh_build: false
      copy_regression_files: |
        cp ./cloudproof_flutter/non_regression_vector.json src/test/resources/cover_crypt/non_regression/js_non_regression_vector.json
        cp ./cloudproof_flutter/sqlite.db                  src/test/resources/findex/non_regression/js_sqlite.db

  cloudproof_js:
    needs: build
    uses: Cosmian/reusable_workflows/.github/workflows/cloudproof_js.yml@develop
    with:
      branch: develop
      target: wasm32-unknown-unknown
      kms-version: 4.10.0
      findex-cloud-version: 0.3.1
      copy_fresh_build: false
      copy_regression_files: |
        cp ./cloudproof_flutter/non_regression_vector.json tests/data/cover_crypt/non_regression/java_non_regression_vector.json
        cp ./cloudproof_flutter/sqlite.db                  tests/data/findex/non_regression/java_sqlite.db

  cloudproof_python:
    needs: build
    uses: Cosmian/reusable_workflows/.github/workflows/cloudproof_python.yml@develop
    with:
      branch: develop
      target: x86_64-unknown-linux-gnu
      kms-version: 4.10.0
      findex-cloud-version: 0.3.1
      copy_fresh_build: false
      copy_regression_files: |
        cp ./cloudproof_flutter/non_regression_vector.json tests/data/cover_crypt/non_regression/java_non_regression_vector.json
        cp ./cloudproof_flutter/sqlite.db                  tests/data/findex/non_regression/java_sqlite.db

  release:
    needs:
      - cloudproof_flutter_with_services
      - cloudproof_java
      - cloudproof_js
      - cloudproof_python
    name: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1

  cleanup:
    needs:
      - release
    uses: Cosmian/reusable_workflows/.github/workflows/cleanup_cache.yml@main
    secrets: inherit

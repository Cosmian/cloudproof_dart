// NOTE: Autogenerated file

/**
 * Use a 256-bit `K`
 */
#define MASTER_KEY_LENGTH 32

/**
 * Use a 128-bit `K_wi`
 */
#define KWI_LENGTH 16

/**
 * Use a 128-bit `K_uid`
 * TODO TBZ: use 256 bits ?
 */
#define KMAC_KEY_LENGTH 16

/**
 * `CHAIN_TABLE_VALUE_SIZE` constant refers to Findex.pdf paragraph 3.2: Index
 * Chain Table `chain_table_value = EncSym(ùêæùë§ùëñ , ùêøùë§ùëñ,2)`
 */
#define CHAIN_TABLE_VALUE_SIZE 60

typedef int (*FetchEntryTableCallback)(char *entries_ptr, unsigned int *entries_len, const unsigned char *uids_ptr, unsigned int uids_len);

typedef void (*UpsertEntryTableCallback)(const unsigned char *entries_ptr, const unsigned int *entries_len, unsigned char *outputs_ptr, unsigned int *outputs_len);

typedef void (*InsertChainTableCallback)(const unsigned char *chain_ptr, const unsigned int *chain_len);

typedef bool (*ProgressCallback)(const unsigned char *intermediate_results_ptr, unsigned int intermediate_results_len);

typedef int (*FetchChainTableCallback)(char *chain_ptr, unsigned int *chain_len, const unsigned char *uids_ptr, unsigned int uids_len);

/**
 *
 * # Return
 *
 * - 0: all done
 * - 1: ask again for more entries
 * - _: error
 */
typedef int (*FetchAllEntryTableCallback)(char *entries_ptr, unsigned int *entries_len, unsigned int number_of_entries);

typedef int (*UpdateLinesCallback)(const unsigned char *removed_chain_table_ids_ptr, unsigned int removed_chain_table_ids_len, const unsigned char *new_encrypted_entry_table_items_ptr, unsigned int new_encrypted_entry_table_items_len, const unsigned char *new_encrypted_chain_table_items_ptr, unsigned int new_encrypted_chain_table_items_len);

typedef int (*ListRemovedLocationsCallback)(char *removed_locations_ptr, unsigned int *removed_locations_len, const unsigned char *locations_ptr, unsigned int locations_len);

/**
 * # Safety
 * cannot be safe since using FFI
 */
int h_upsert(const uint8_t *master_key_ptr,
             int master_key_len,
             const uint8_t *label_ptr,
             int label_len,
             const char *indexed_values_and_keywords_ptr,
             FetchEntryTableCallback fetch_entry,
             UpsertEntryTableCallback upsert_entry,
             InsertChainTableCallback upsert_chain);

/**
 * Works the same as `h_upsert()` but upserts the graph of all keywords used in
 * `indexed_values_and_keywords` too.
 *
 * # Safety
 * cannot be safe since using FFI
 */
int h_graph_upsert(const uint8_t *master_key_ptr,
                   int master_key_len,
                   const uint8_t *label_ptr,
                   int label_len,
                   const char *indexed_values_and_keywords_ptr,
                   FetchEntryTableCallback fetch_entry,
                   UpsertEntryTableCallback upsert_entry,
                   InsertChainTableCallback upsert_chain);

/**
 * # Safety
 * cannot be safe since using FFI
 */
int h_search(char *indexed_values_ptr,
             int *indexed_values_len,
             const char *key_k_ptr,
             int key_k_len,
             const uint8_t *label_ptr,
             int label_len,
             const char *keywords_ptr,
             int loop_iteration_limit,
             int max_depth,
             ProgressCallback progress_callback,
             FetchEntryTableCallback fetch_entry,
             FetchChainTableCallback fetch_chain);

/**
 * # Safety
 * cannot be safe since using FFI
 */
int h_compact(int num_reindexing_before_full_set,
              const uint8_t *master_key_ptr,
              int master_key_len,
              const uint8_t *new_master_key_ptr,
              int new_master_key_len,
              const uint8_t *label_ptr,
              int label_len,
              FetchEntryTableCallback fetch_entry,
              FetchChainTableCallback fetch_chain,
              FetchAllEntryTableCallback fetch_all_entry,
              UpdateLinesCallback update_lines,
              ListRemovedLocationsCallback list_removed_locations);

/**
 * Get the most recent error as utf-8 bytes, clearing it in the process.
 * # Safety
 * - `error_msg`: must be pre-allocated with a sufficient size
 */
int get_last_error(char *error_msg_ptr, int *error_len);
